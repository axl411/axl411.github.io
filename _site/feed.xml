<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-10-13T23:02:25+09:00</updated><id>/feed.xml</id><title type="html">axl411</title><entry><title type="html">Swift 下各种 Locking Mechanism 的封装及性能比较</title><link href="/swift/ios/concurrency/2018/10/12/swift-locking-abstraction-and-performance-comparison.html" rel="alternate" type="text/html" title="Swift 下各种 Locking Mechanism 的封装及性能比较" /><published>2018-10-12T12:17:05+09:00</published><updated>2018-10-12T12:17:05+09:00</updated><id>/swift/ios/concurrency/2018/10/12/swift-locking-abstraction-and-performance-comparison</id><content type="html" xml:base="/swift/ios/concurrency/2018/10/12/swift-locking-abstraction-and-performance-comparison.html">&lt;p&gt;我们来尝试封装一个 utility，目标是能够轻松地为已有的 property 加上线程安全。&lt;/p&gt;

&lt;h1 id=&quot;封装-lock-api&quot;&gt;封装 Lock api&lt;/h1&gt;

&lt;p&gt;首先封装一下 lock api，以 unfair lock 为例：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UnfairLock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;unfairLock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;os_unfair_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;os_unfair_lock_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unfairLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;os_unfair_lock_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unfairLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样，我们能够更容易地使用 lock api：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// declare lock as a property&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UnfairLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// in some methods...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// do critical things safely&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;封装线程安全的-property&quot;&gt;封装线程安全的 property&lt;/h1&gt;

&lt;p&gt;然后，我们进一步地封装一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;LockedPropertyWrapper&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LockedPropertyWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;wrapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UnfairLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wrapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrapped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapped&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapped&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;wrapped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;/// Set the wrapped property using a closure&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// - Parameters:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;///   - setter: takes in the old value, returns the new value&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;///   - oldValue: the old value&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;setter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oldValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;wrapped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;/// Mutate the wrapped property using a closure&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// - Parameters:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;///   - mutator: takes in the wrapped value, modifications to it can be done safely&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;///   - wrappedValue: the wrapped value&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutateValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;wrappedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样，我们就能够比较轻松地为我们的 property 加上线程安全：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// declaration&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myPropertyWrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LockedPropertyWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wrapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// get myProperty safely&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myProperty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myPropertyWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// set myProperty safely&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myPropertyWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;myProperty&lt;/code&gt; 是 private 的，我们可以简单地直接在代码里使用它的 wrapper，如上☝️所示。我们也可以进一步使用一个 computed property 来提供和普通 property 一样的 interface：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyProperty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myPropertyWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myPropertyWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样，我们就能像普通的 property 一样去使用它了。&lt;/p&gt;

&lt;p&gt;⚠️ 需要注意的是，我们的 &lt;code class=&quot;highlighter-rouge&quot;&gt;LockedPropertyWrapper.value&lt;/code&gt; 以及 &lt;code class=&quot;highlighter-rouge&quot;&gt;myProperty&lt;/code&gt; 实现的只是 atomic，对它们的操作并不能保证线程安全。例如，从多个线程同时执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;myProperty += 1&lt;/code&gt; 是线程不安全的，因为这实际上是两个操作：读和写。要确保线程安全，还是需要用 &lt;code class=&quot;highlighter-rouge&quot;&gt;setValue(_:)&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;mutateValue(_:)&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;其他各种-locking-mechanism-的封装&quot;&gt;其他各种 locking mechanism 的封装&lt;/h1&gt;

&lt;p&gt;用上文同样的思路我们可以封装其他 lock 的 api 如下：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nsLock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RecrusiveLock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nsLock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSRecursiveLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MutexLock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mutexLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pthread_mutex_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mutex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pthread_mutex_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;pthread_mutex_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pthread_mutex_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutexLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pthread_mutex_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutexLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ObjcSyncLock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;objc_sync_enter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;objc_sync_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SemaphoreLock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DispatchSemaphore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当然我们还可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;DispatchQueue&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;sync&lt;/code&gt; 来实现 locking。&lt;/p&gt;

&lt;h1 id=&quot;各种-locking-mechanism-的性能比较&quot;&gt;各种 locking mechanism 的性能比较&lt;/h1&gt;

&lt;p&gt;我准备了&lt;a href=&quot;https://github.com/axl411/LockingMethodsComparison&quot;&gt;一段代码&lt;/a&gt;来测试各种 locking mechanism 的性能，方式是用3个线程同时对一个线程安全的 counter 增1 各300000次。测试结果如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+++++ UnfairLock +++++
    ✅ elapsed time: 0.43625009059906006

+++++ ObjcSyncLock +++++
    ✅ elapsed time: 0.45990192890167236

+++++ MutexLock +++++
    ✅ elapsed time: 1.0517339706420898

+++++ Lock +++++
    ✅ elapsed time: 1.0154080390930176

+++++ RecrusiveLock +++++
    ✅ elapsed time: 1.3077090978622437

+++++ SemaphoreLock +++++
    ✅ elapsed time: 5.190653085708618

+++++ SyncQueue +++++
    ✅ elapsed time: 7.316784024238586
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;结论：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;能用 &lt;code class=&quot;highlighter-rouge&quot;&gt;os_unfair_lock&lt;/code&gt; 的话就用 &lt;code class=&quot;highlighter-rouge&quot;&gt;os_unfair_lock&lt;/code&gt; 吧。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSLock&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;pthread_mutex_t&lt;/code&gt; 的性能差不多，并没有因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;pthread_mutex_t&lt;/code&gt; 是下层 api 就更快。&lt;/li&gt;
  &lt;li&gt;单纯地用 &lt;code class=&quot;highlighter-rouge&quot;&gt;DispatchSemaphore&lt;/code&gt; 甚至是 &lt;code class=&quot;highlighter-rouge&quot;&gt;DispatchQueue.sync&lt;/code&gt; 来实现一个 property 的安全是不合适的，慢太多了，它们应该被用在有更复杂需求的场景。&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">我们来尝试封装一个 utility，目标是能够轻松地为已有的 property 加上线程安全。</summary></entry><entry><title type="html">iOS Libs 与 Frameworks 的理解和使用</title><link href="/ios/foundation/2017/03/01/ios-libs-and-frameworks.html" rel="alternate" type="text/html" title="iOS Libs 与 Frameworks 的理解和使用" /><published>2017-03-01T00:25:05+09:00</published><updated>2017-03-01T00:25:05+09:00</updated><id>/ios/foundation/2017/03/01/ios-libs-and-frameworks</id><content type="html" xml:base="/ios/foundation/2017/03/01/ios-libs-and-frameworks.html">&lt;p&gt;(also posted on &lt;a href=&quot;http://mobilists.eleme.io/2017/02/28/iOS-Libs-与-Frameworks-的理解和使用/&quot;&gt;饿了么移动组 Blog&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;本文将从两个角度——理论与实践，来介绍 iOS 开发中接触到的动态库、静态库、framework。理论部分会以简单的例子来建立对概念的理解；实践部分则是使用 cocoapods 的一些技巧。&lt;/p&gt;

&lt;h1 id=&quot;名词&quot;&gt;名词&lt;/h1&gt;

&lt;p&gt;首先我们熟悉一下以下名词概念：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;代码（code）：不止是指源代码（source code）形式的代码，也指代编译后产生的二进制代码。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mach-O：操作系统能够使用的二进制文件格式，很多种类的文件都是 Mach-O 文件，包括动态库、静态库、可执行文件，都是 Mach-O 文件。本文将替换使用多种代称，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;object file&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;对象文件&lt;/code&gt;，都是指同一个概念。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;动态库、 dynamic linked library、dynamic library、shared library、embedded shared library 这些名词都是指动态库。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;理解-libs-与-frameworks&quot;&gt;理解 Libs 与 Frameworks&lt;/h1&gt;

&lt;p&gt;Libs（库），或是 Frameworks，无论静态还是动态，都是一种依赖管理的形式，其最终目的都是将程序依赖的&lt;code class=&quot;highlighter-rouge&quot;&gt;代码&lt;/code&gt;载入到程序所在进程的地址空间中，从而让我们的程序能够使用它们。静态库、动态库只是用了不同的机制来实现这个目的。&lt;/p&gt;

&lt;h2 id=&quot;静态库&quot;&gt;静态库&lt;/h2&gt;

&lt;p&gt;我们直接以一个简单的例子讲述如何创建静态库并使用它，从而对静态库建立一个简单的概念。&lt;/p&gt;

&lt;h3 id=&quot;制作静态库&quot;&gt;制作静态库&lt;/h3&gt;

&lt;p&gt;有如下两个简单的源代码 &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.h&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.c&lt;/code&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;bar.c&lt;/code&gt; 中声明了 &lt;code class=&quot;highlighter-rouge&quot;&gt;fizz&lt;/code&gt; 函数，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;CoreFoundation&lt;/code&gt; 的方法打印一个字符串 &lt;code class=&quot;highlighter-rouge&quot;&gt;buzz&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;bar.h&lt;/code&gt; 将 &lt;code class=&quot;highlighter-rouge&quot;&gt;fizz&lt;/code&gt; 函数暴露了出来：&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// bar.h&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifndef __foo__bar__
#define __foo__bar__
#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fizz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* defined(__foo__bar__) */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// bar.c&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &quot;bar.h&quot;
#include &amp;lt;CoreFoundation/CoreFoundation.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fizz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CFShow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;buzz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;clang&lt;/code&gt; 将 &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.c&lt;/code&gt; 编译为  &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.o&lt;/code&gt;。为了简化问题，我们只输出为 &lt;code class=&quot;highlighter-rouge&quot;&gt;x86_64&lt;/code&gt; 处理器架构编译的结果。从 &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; 命令的输出可以看到，输出的 &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.o&lt;/code&gt; 是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Mach-O&lt;/code&gt; object file：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;clang &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; bar.c &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; bar.o &lt;span class=&quot;nt&quot;&gt;-arch&lt;/span&gt; x86_64
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;file bar.o
bar.o: Mach-O 64-bit object x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;libtool&lt;/code&gt;，以 &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.o&lt;/code&gt; 为输入，输出一个名称为 &lt;code class=&quot;highlighter-rouge&quot;&gt;libfoo_static.a&lt;/code&gt; 的静态库。从 &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; 的输出可以看到，静态库的文件类型是 &lt;code class=&quot;highlighter-rouge&quot;&gt;current ar archive random library&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;libtool &lt;span class=&quot;nt&quot;&gt;-static&lt;/span&gt; bar.o &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; libfoo_static.a
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;file libfoo_static.a
libfoo_static.a: current ar archive random library
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使用静态库&quot;&gt;使用静态库&lt;/h3&gt;

&lt;p&gt;有如下简单的 &lt;code class=&quot;highlighter-rouge&quot;&gt;main.c&lt;/code&gt; 源代码，通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.h&lt;/code&gt; 调用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;fizz&lt;/code&gt; 函数：&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// main.c&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &quot;bar.h&quot;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fizz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;和制作静态库一样，用 &lt;code class=&quot;highlighter-rouge&quot;&gt;clang&lt;/code&gt; 将 &lt;code class=&quot;highlighter-rouge&quot;&gt;main.c&lt;/code&gt; 编译为 &lt;code class=&quot;highlighter-rouge&quot;&gt;main.o&lt;/code&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;main.o&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.o&lt;/code&gt; 的类型一样，都是 object file：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;clang &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; main.c &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; main.o &lt;span class=&quot;nt&quot;&gt;-arch&lt;/span&gt; x86_64
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;file main.o
main.o: Mach-O 64-bit object x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;ld&lt;/code&gt;（linker／链接器）来输出一个名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_static&lt;/code&gt; 的可执行文件。&lt;code class=&quot;highlighter-rouge&quot;&gt;ld&lt;/code&gt; 接收的输入有：&lt;code class=&quot;highlighter-rouge&quot;&gt;main.o&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;CoreFoundation&lt;/code&gt; framework、额外指定了当前文件夹为 library search path（&lt;code class=&quot;highlighter-rouge&quot;&gt;-L.&lt;/code&gt;）、&lt;code class=&quot;highlighter-rouge&quot;&gt;libfoo_static&lt;/code&gt;（&lt;code class=&quot;highlighter-rouge&quot;&gt;-lfoo_static&lt;/code&gt;，正是因为额外指定了当前文件夹为 library search path 才能够找到它）、为简化问题只对 &lt;code class=&quot;highlighter-rouge&quot;&gt;x86_64&lt;/code&gt; 架构编译（-lSystem 表示 libsystem，可以忽略，不影响对概念的理解）。通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; 的输出可以看到 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_static&lt;/code&gt; 可执行文件也是一种 &lt;code class=&quot;highlighter-rouge&quot;&gt;Mach-O&lt;/code&gt; 文件：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ld main.o &lt;span class=&quot;nt&quot;&gt;-framework&lt;/span&gt; CoreFoundation &lt;span class=&quot;nt&quot;&gt;-lSystem&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-lfoo_static&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; test_static &lt;span class=&quot;nt&quot;&gt;-arch&lt;/span&gt; x86_64
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;file test_static
test_static: Mach-O 64-bit executable x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_static&lt;/code&gt;，功能正常，输出了 &lt;code class=&quot;highlighter-rouge&quot;&gt;buzz&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./test_static
buzz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;分析&quot;&gt;分析&lt;/h3&gt;

&lt;p&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;nm&lt;/code&gt; 查看 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_static&lt;/code&gt; 可执行文件的符号表（symbol table），留意如下信息：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_CFShow&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;___CFConstantStringClassReference&lt;/code&gt; 是来自 &lt;code class=&quot;highlighter-rouge&quot;&gt;CoreFoundation&lt;/code&gt; framework 的 symbol，在这里还未被 resolve（即还没有指令所在的地址），这是因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;CoreFoundation&lt;/code&gt; framework 是动态链接的，两个 symbol 代表的指令的地址并不会在编译时被 resolve。（后面讲动态链接会介绍动态链接的 symbol 是如何 resolve 的）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_fizz&lt;/code&gt; symbol 是来自静态库 &lt;code class=&quot;highlighter-rouge&quot;&gt;libfoo_static&lt;/code&gt; 的，在这里已经被 resolve 了，即具体的指令已经存在于 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_static&lt;/code&gt; 的二进制中了。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nm test_static
                 U _CFShow
                 U ___CFConstantStringClassReference
0000000100000000 T __mh_execute_header
0000000100000f70 T _fizz
0000000100000f50 T _main
                 U dyld_stub_binder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看 &lt;code class=&quot;highlighter-rouge&quot;&gt;libfoo_static&lt;/code&gt; 以及 &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.o&lt;/code&gt; 的符号表，我们发现：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;libfoo_static&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.o&lt;/code&gt; 的符号表内容是完全一样的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;从 &lt;code class=&quot;highlighter-rouge&quot;&gt;libfoo_static.a(bar.o):&lt;/code&gt; 看出，静态库会把它包含的所有 object file 的符号表分别输出，静态库只是简单的 object file 的集合，这里 &lt;code class=&quot;highlighter-rouge&quot;&gt;libfoo_static&lt;/code&gt; 只包含了一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.o&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一样有 unresolved 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;CoreFoundation&lt;/code&gt; 的 symbol。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nm libfoo_static.a
libfoo_static.a&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;bar.o&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
                 U _CFShow
                 U ___CFConstantStringClassReference
0000000000000000 T _fizz

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nm bar.o
                 U _CFShow
                 U ___CFConstantStringClassReference
0000000000000000 T _fizz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;otool&lt;/code&gt; 查看 &lt;code class=&quot;highlighter-rouge&quot;&gt;libfoo_static&lt;/code&gt; 对 shared library 的依赖，没有看到任何依赖信息，因此指定依赖的责任自然就到了静态库的使用方。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;otool &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; libfoo_static.a
Archive : libfoo_static.a
libfoo_static.a&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;bar.o&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一个典型的静态库的例子是微信 SDK。它的接入文档会提到：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;SDK文件包括 libWeChatSDK.a，WXApi.h，WXApiObject.h 三个&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;并且：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;开发者需要在工程中链接上:SystemConfiguration.framework, libz.dylib, libsqlite3.0.dylib, libc++.dylib, Security.framework, CoreTelephony.framework, CFNetwork.framework&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这和我们看到的例子中自己制作的静态库概念是一样的。&lt;/p&gt;

&lt;h3 id=&quot;小结&quot;&gt;小结&lt;/h3&gt;

&lt;p&gt;经过具体的例子，我们可以理解关于静态库的如下概念：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;静态库就是 object file 的集合。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;因此，在使用静态库的时候需要自行指定静态库的任何依赖。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;静态链接会直接将静态库中的 object file 加到 target（比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_static&lt;/code&gt; 可执行文件） 中去。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;动态库&quot;&gt;动态库&lt;/h2&gt;

&lt;p&gt;动态库和静态库的最大区别是，动态库的代码不会直接加入到目标程序中，而是在启动时由 dynamic link editor &lt;code class=&quot;highlighter-rouge&quot;&gt;dyld&lt;/code&gt; 加载到 app 的内存地址空间；另外，动态库包含自己的依赖信息。下面我们依然通过实例来理解这个概念。&lt;/p&gt;

&lt;h3 id=&quot;制作动态库&quot;&gt;制作动态库&lt;/h3&gt;

&lt;p&gt;复用前面制作静态库时编译出的 &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.o&lt;/code&gt;，依然使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;libtool&lt;/code&gt;，生成名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;libfoo_dynamic.dylib&lt;/code&gt; 的动态库。注意这里需要指定 &lt;code class=&quot;highlighter-rouge&quot;&gt;CoreFoundation&lt;/code&gt; framework（可以忽略 -lSystem，不影响对概念的理解）。生成的 &lt;code class=&quot;highlighter-rouge&quot;&gt;libfoo_dynamic&lt;/code&gt; 的文件类型是动态库：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;libtool &lt;span class=&quot;nt&quot;&gt;-dynamic&lt;/span&gt; bar.o &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; libfoo_dynamic.dylib &lt;span class=&quot;nt&quot;&gt;-framework&lt;/span&gt; CoreFoundation &lt;span class=&quot;nt&quot;&gt;-lSystem&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;file libfoo_dynamic.dylib
libfoo_dynamic.dylib: Mach-O 64-bit dynamically linked shared library x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 linker &lt;code class=&quot;highlighter-rouge&quot;&gt;ld&lt;/code&gt; 来输出一个可执行文件 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_dynamic&lt;/code&gt;。这次的输入是同样复用前面编译出的 &lt;code class=&quot;highlighter-rouge&quot;&gt;main.o&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;foo_dynamic&lt;/code&gt; 动态库（忽略 &lt;code class=&quot;highlighter-rouge&quot;&gt;-lSystem&lt;/code&gt;），并指定当前文件夹 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;（也就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;foo_dynamic&lt;/code&gt; 动态库所在的文件夹） 为 library search path。&lt;code class=&quot;highlighter-rouge&quot;&gt;test_dynamic&lt;/code&gt; 同样是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Mach-O&lt;/code&gt; 可执行文件：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ld main.o &lt;span class=&quot;nt&quot;&gt;-lSystem&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-lfoo_dynamic&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; test_dynamic &lt;span class=&quot;nt&quot;&gt;-arch&lt;/span&gt; x86_64
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;file test_dynamic
test_dynamic: Mach-O 64-bit executable x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_dynamic&lt;/code&gt;，同样能够输出正确的结果：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./test_dynamic
buzz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;分析-1&quot;&gt;分析&lt;/h3&gt;

&lt;p&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;nm&lt;/code&gt; 查看 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_dynamic&lt;/code&gt; 可执行文件的 symbol table，留意如下信息：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;来自 &lt;code class=&quot;highlighter-rouge&quot;&gt;CoreFoundation&lt;/code&gt; framework 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;_CFShow&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;___CFConstantStringClassReference&lt;/code&gt; symbol 并没有存在于 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_dynamic&lt;/code&gt; 的符号表中。&lt;code class=&quot;highlighter-rouge&quot;&gt;_fizz&lt;/code&gt; 符号只是个 reference，并没有被 resolve。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;来自动态库 &lt;code class=&quot;highlighter-rouge&quot;&gt;libfoo_dynamic&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;_fizz&lt;/code&gt; symbol 在这里并没有被 resolve。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nm test_dynamic
0000000100000000 T __mh_execute_header
                 U _fizz
0000000100000f70 T _main
                 U dyld_stub_binder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看 &lt;code class=&quot;highlighter-rouge&quot;&gt;libfoo_dynamic&lt;/code&gt; 以及 &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.o&lt;/code&gt; 的符号表，我们发现：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;libfoo_dynamic&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.o&lt;/code&gt; 的 symbol table 内容并不是完全一样的，&lt;code class=&quot;highlighter-rouge&quot;&gt;_fizz&lt;/code&gt; symbol 的地址在两者的 symbol table 中是不同的。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nm libfoo_dynamic.dylib
                 U _CFShow
                 U ___CFConstantStringClassReference
0000000000000f70 T _fizz
                 U dyld_stub_binder

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nm bar.o
                 U _CFShow
                 U ___CFConstantStringClassReference
0000000000000000 T _fizz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;otool&lt;/code&gt; 查看 &lt;code class=&quot;highlighter-rouge&quot;&gt;libfoo_dynamic&lt;/code&gt; 的依赖信息，可以看到 &lt;code class=&quot;highlighter-rouge&quot;&gt;CoreFoundation&lt;/code&gt; 是在里面的（同样，忽略 &lt;code class=&quot;highlighter-rouge&quot;&gt;libSystem&lt;/code&gt;），因此使用方就不需要指定这个依赖了：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;otool &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; libfoo_dynamic.dylib
libfoo_dynamic.dylib:
	libfoo_dynamic.dylib &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;compatibility version 0.0.0, current version 0.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;compatibility version 150.0.0, current version 1348.28.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	/usr/lib/libSystem.B.dylib &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;compatibility version 1.0.0, current version 1238.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;经过具体的例子，我们可以理解关于动态库的如下概念：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;动态库包含了自己的依赖信息，因此，在使用动态库的时候直接使用动态库就可以。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;动态链接并不会直接将动态库中的 object file 加到 target（比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_dynamic&lt;/code&gt; 可执行文件） 中去。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;程序是如何使用动态库的&quot;&gt;程序是如何使用动态库的&lt;/h3&gt;

&lt;p&gt;当执行程序时，例如执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;./test_dynamic&lt;/code&gt; 时，在其 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; 函数被调用前，Kernel 除了会把 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_dynamic&lt;/code&gt; 载入到为其分配的内存空间外，还会载入 &lt;code class=&quot;highlighter-rouge&quot;&gt;dyld&lt;/code&gt; linker，然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;dyld&lt;/code&gt; 会根据 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_dynamic&lt;/code&gt; 的依赖信息，将它依赖的 shared library（也就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;libfoo_dynamic&lt;/code&gt;）以及这些 shared library 的依赖（也就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;CoreFoundation&lt;/code&gt;）同样载入到内存地址空间。&lt;code class=&quot;highlighter-rouge&quot;&gt;test_dynamic&lt;/code&gt; 中未 resolve 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;_fizz&lt;/code&gt; symbol 会在这时被 resolve。&lt;/p&gt;

&lt;p&gt;这些 shared library 实际上在设备的物理内存中只存在一份，通过一个 mapping 的机制让它们能同时存在于多个应用的内存地址空间中。&lt;/p&gt;

&lt;p&gt;另外，既然在物理内存中只存在一份，那多个应用使用的同一个 shared library 中的同一个变量是如何有对于该应用而言独有的 value 的呢？知道 Copy on Write 机制，字面意思就是在写操作时就 copy 一份这个概念就行了。&lt;/p&gt;

&lt;p&gt;具体的细节可以参考&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2016/406/&quot;&gt;这集WWDC&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;framework&quot;&gt;Framework&lt;/h2&gt;

&lt;p&gt;在理解了动态库、静态库的基础上，framework 只是一个后缀为 &lt;code class=&quot;highlighter-rouge&quot;&gt;.framework&lt;/code&gt; 的文件夹，包含了额外的资源，例如头文件、图片、文档、多语言支持资源、nib 等等。虽然 Framework  还有版本的概念，可以同时包含多个版本的 framework 在同一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;.framework&lt;/code&gt; 内，但对于 iOS 来说这不重要，因为我们的 Framework 是随 app 的 bundle 一起发布的，不存在被多方使用的问题。动态库在 app bundle 内的位置如下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MyApp.app
├── Frameworks
│   └── MyDylib.dylib
│   └── MyFramework.framework
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;用-cocoapods使用-libs-与-frameworks&quot;&gt;（用 cocoapods）使用 Libs 与 Frameworks&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;将 libWeChatSDK.a，WXApi.h，WXApiObject.h 这三个拖到主工程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;开发者需要在工程中链接上:a.framework, b.dylib, c.dylib, d.dylib, e.framework, f.framework, g.framework&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;将 a.png，b.png，c.js 拖到主工程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;手动接入某个库或 Framework 往往需要做上面这些手动的事情，时间一长、接入的多了，非常不利于项目的维护。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cocoapods.org/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cocoapods&lt;/code&gt;&lt;/a&gt; 提供了非常好的依赖管理机制，并且可以用来对我们要使用的库、framework 进行封装，方便管理维护，不管是静态库、动态库还是 framework，只要填写一份统一的 &lt;code class=&quot;highlighter-rouge&quot;&gt;podspec&lt;/code&gt;，就能完成对依赖的封装。如下所示，封装一个依赖的 &lt;code class=&quot;highlighter-rouge&quot;&gt;podspec&lt;/code&gt; 通常涉及到填写这些属性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vendored_frameworks&lt;/code&gt;：要封装的 framework 的路径&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vendored_libraries&lt;/code&gt;：要封装的 lib 的路径&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;source_files&lt;/code&gt;：这里只需要填写想要暴露的头文件的路径&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;libraries&lt;/code&gt;：要封装的库所需要的依赖库&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;frameworks&lt;/code&gt;：要封装的库所依赖的 framework&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;weak_framework&lt;/code&gt;：要封装的库所依赖的 weak link 的 framework，例如 &lt;code class=&quot;highlighter-rouge&quot;&gt;UserNotifications&lt;/code&gt; framework 是一个 iOS 10 才有的 framework，通过 weak linking + runtime availability check，可以在低于 iOS 10 的平台上安全地跑起来&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vendored_frameworks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a.framework'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'b.framework'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vendored_libraries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'liba.a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'libb.a'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
spec.libraries = '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml2&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;', '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
spec.frameworks = '&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;QuartzCore&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;', ‘CoreData'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weak_framework&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UserNotifications&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;静态库转动态库&quot;&gt;静态库转动态库&lt;/h2&gt;

&lt;p&gt;一般不推荐这么做，不过把静态库转动态库也是可行的。&lt;/p&gt;

&lt;p&gt;操作的方法是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;确保该静态库包含全部需要的架构。&lt;/li&gt;
  &lt;li&gt;用 Xcode 创建一个 Cocoa Touch Framework 的 project，用来封装静态库。&lt;/li&gt;
  &lt;li&gt;把静态库、静态库的头文件正常手动加入到项目中。&lt;/li&gt;
  &lt;li&gt;在 Build Settings 中的 Other Linker Flags 中加入 &lt;code class=&quot;highlighter-rouge&quot;&gt;-all_load&lt;/code&gt; flag，从而在 link 时把所有静态库中的代码加载进来。&lt;/li&gt;
  &lt;li&gt;在 Build Settings 中的 Framework Search Paths 以及 Library Search Paths 中添加静态库所在的路径，从而在 compile 时能找到该静态库。&lt;/li&gt;
  &lt;li&gt;在 Build Phase 中的 Link Binary With Libraries 区域加入添加的静态库。&lt;/li&gt;
  &lt;li&gt;在 Build Phase 中的 Headers 区域把要暴露的头文件移到 Public。&lt;/li&gt;
  &lt;li&gt;根据静态库的接入文档，在工程中链接上需要的其他库、framework。&lt;/li&gt;
  &lt;li&gt;到这一步应该编译通过了。&lt;/li&gt;
  &lt;li&gt;目前的 Xcode 只会输出 only 模拟器 or only device 架构的动态库，因此为了生成一个可同时被模拟器以及真机使用的动态库，需要输出两次，并用 &lt;code class=&quot;highlighter-rouge&quot;&gt;lipo&lt;/code&gt; 工具把架构合并。&lt;/li&gt;
  &lt;li&gt;蛋疼的是，当使用这个动态库的工程打包时，又需要用 &lt;code class=&quot;highlighter-rouge&quot;&gt;lipo&lt;/code&gt; 工具把不需要的架构去掉（也就是为真机打包时，要去掉模拟器的架构）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;正是因为需要做这么多额外的工作，因此不推荐这么做。不过，把生成的动态库用 cocoapods 封装的话，cocoapods 在安装时会生成自动去除不需要架构的 build phase。&lt;/p&gt;

&lt;p&gt;这么做有一个风险就是，由于改变了链接库的方式，最后库的资源在 iOS app 中的路径也会改变，如果库的开发者在编写库时取资源的姿势做了简单的假设的话（假设资源肯定在 app 的 main bundle 中），就会取不到资源了。下一章将详细介绍一下在库中取资源的姿势。&lt;/p&gt;

&lt;h2 id=&quot;资源的读取&quot;&gt;资源的读取&lt;/h2&gt;

&lt;p&gt;在 pod 中取资源不能简单假设资源所在的位置，否则会取不到资源。我们直接通过例子来看这个问题。假设有下面这样一个 pod：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;名字叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;MyPod&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;resources&lt;/code&gt; 来指定资源，这是不推荐的做法&lt;/li&gt;
  &lt;li&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;resource_bundles&lt;/code&gt; 来指定资源，这是推荐的做法&lt;/li&gt;
  &lt;li&gt;包含的资源是名叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;img.png&lt;/code&gt; 的图片&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyPod&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 不推荐的做法&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#{PATH_TO_RESOURCE}”&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resource_bundles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'MyPod'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PATH_TO_RESOURCE&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后，我们有一个 iOS app 叫做 &lt;code class=&quot;highlighter-rouge&quot;&gt;MyApp&lt;/code&gt;，用 3 种姿势来使用这个 pod：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;case 1：在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 里用 &lt;code class=&quot;highlighter-rouge&quot;&gt;use_frameworks!&lt;/code&gt; 来安装 pod（pod 会被编译为动态库）&lt;/li&gt;
  &lt;li&gt;case 2：在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 里不用 &lt;code class=&quot;highlighter-rouge&quot;&gt;use_frameworks!&lt;/code&gt; 来安装 pod（pod 会被编译为静态库）&lt;/li&gt;
  &lt;li&gt;case 3：在 &lt;code class=&quot;highlighter-rouge&quot;&gt;MyApp&lt;/code&gt; 工程里手动建一个名叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;MyHandMadeFramework&lt;/code&gt; 的 Cocoa Touch Framework，并通过 pod 把 &lt;code class=&quot;highlighter-rouge&quot;&gt;MyPod&lt;/code&gt; 安装在 &lt;code class=&quot;highlighter-rouge&quot;&gt;MyHandMadeFramework&lt;/code&gt; 的 target 上，然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;MyApp&lt;/code&gt; 手动引入 &lt;code class=&quot;highlighter-rouge&quot;&gt;MyHandMadeFramework&lt;/code&gt; 来使用。这种 case 虽然绕了点，但也是完全合理的一种使用姿势，并且资源在这种 case 下所在的位置是比较特别的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;用-resources-指定资源的情况&quot;&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;resources&lt;/code&gt; 指定资源的情况&lt;/h3&gt;

&lt;p&gt;最终 &lt;code class=&quot;highlighter-rouge&quot;&gt;img.png&lt;/code&gt; 在3种情况下编译出来的 app 中的路径如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// &quot;case 1&quot;
MyApp.app/Frameworks/MyPod.framework/img.png
// &quot;case 2&quot;
MyApp.app/img.png
// &quot;case 3&quot;
MyApp.app/Frameworks/MyHandMadeFramework.framework/img.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因此，如果在取资源的时候简单地假设资源肯定在 main bundle，用如下姿势去取的话，肯定是不 work 的：&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pathForResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;img&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ofType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;正确的做法是用 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundleForClass&lt;/code&gt; 取出 &lt;code class=&quot;highlighter-rouge&quot;&gt;MyPod&lt;/code&gt; 的代码所在的 bundle:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundleContainingPodsCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bundleForClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundleContainingPodsCode&lt;/code&gt; 的路径分别是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// &quot;case 1&quot;
MyApp.app/Frameworks/MyPod.framework/
// &quot;case 2&quot;
MyApp.app/
// &quot;case 3&quot;
MyApp.app/Frameworks/MyHandMadeFramework.framework/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后以这个 bundle 的相对路径去取资源就始终能取到正确的资源了：&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imgPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundleContainingPodsCode&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pathForResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;img&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ofType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;用-resource_bundles-指定资源的情况&quot;&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;resource_bundles&lt;/code&gt; 指定资源的情况&lt;/h3&gt;

&lt;p&gt;最终 &lt;code class=&quot;highlighter-rouge&quot;&gt;img.png&lt;/code&gt; 在3种情况下编译出来的 app 中的路径如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// &quot;case 1&quot;
MyApp.app/Frameworks/MyPod.framework/MyPod.bundle/img.png
// &quot;case 2&quot;
MyApp.app/MyPod.bundle/img.png
// &quot;case 3&quot;
MyApp.app/Frameworks/MyHandMadeFramework.framework/MyPod.bundle/img.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到这种情况和 &lt;code class=&quot;highlighter-rouge&quot;&gt;resources&lt;/code&gt; 的情况区别在于：&lt;code class=&quot;highlighter-rouge&quot;&gt;img.png&lt;/code&gt; 被额外放在了名叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;MyPod.bundle&lt;/code&gt; 的 bundle 内。因此，取资源的姿势上要额外把这个 bundle 取出来，再用相对路径去取资源：&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libBundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bundleForClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceBundlePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libBundle&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bundlePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringByAppendingPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;MyPod.bundle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceBundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bundleWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceBundlePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 这里应该把 resourceBundle 缓存下来&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imgPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceBundle&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pathForResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;img&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ofType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当然，如果你的 app 的 deployment target 为 iOS 8，那么可以直接用如下这个新的 api 来从 resource bundle 里取图片：&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;imageNamed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;img&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceBundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compatibleWithTraitCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">(also posted on 饿了么移动组 Blog)</summary></entry></feed>